//

buildscript {
    ext {
        set("jfrogArtifactoryVersion", "4+")
        set("lombokIdVersion", '6.5.0.3')
        set("shadowIdVersion", '7.1.0')
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.jooq:jooq-codegen'
        classpath 'com.h2database:h2:2.1.214'
        classpath 'org.jooq:jooq-meta-extensions-liquibase:3.17.7'
    }
//    configurations['classpath'].resolutionStrategy.eachDependency {
//        if (requested.group == 'org.jooq') {
//            useVersion '3.17.6'
//        }
//    }
}

plugins {
    id 'java'
    id 'idea'
    id "maven-publish"
    id 'checkstyle'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'io.freefair.lombok' version "${lombokIdVersion}"
    id 'jacoco'
    id 'nu.studer.jooq' version '8.1'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
}

//ext {
//    set("log4j2Version", '2.19.0')
//}
dependencies {
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-graphql')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.2.1'
    //
    implementation 'org.liquibase:liquibase-core'
    // JOOQ
    jooqGenerator 'com.h2database:h2:2.1.214'
    implementation('org.springframework.boot:spring-boot-starter-jooq')
    implementation('org.jooq:jooq:3.17.7')
    implementation('org.jooq:jooq-codegen:3.17.7')
    implementation('org.jooq:jooq-meta-extensions-liquibase:3.17.7')

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
}

checkstyle {
    configFile = project(':').file("checkstyle.xml")
    checkstyleTest.enabled = false
}
checkstyleMain.dependsOn compileJava

task buildZip(type: Zip) {
    archiveExtension.set("jar")
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}
build.dependsOn buildZip

tasks.named('test') {
    useJUnitPlatform()
}

jooq {
    version = '3.17.6'
//    edition = JooqEdition.OSS

    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.h2.Driver'
                    url = 'jdbc:h2:file:./db.h2'
//                    url = 'jdbc:h2:file:./;AUTO_SERVER=TRUE'
                    user = 'sa'
                    password = 'sa'
                    properties {
                        property {
                            key = 'PAGE_SIZE'
                            value = 2048
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.h2.H2Database'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = false
                        immutablePojos = false
                        fluentSetters = false
                    }
                    target {
                        packageName = 'nu.studer.sample'
//                        directory = 'src/generated/jooq'
                        directory = 'build/generated/jooq/java'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}
