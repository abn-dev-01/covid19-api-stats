//
buildscript {
    ext {
        set("lombokIdVersion", '6.6.1')
        set("flywayDbVersion", '9.14.1')
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.jooq:jooq-codegen:3.17.7'
    }
}

plugins {
    id 'java'
    id 'idea'
    id "maven-publish"
//    id 'checkstyle'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'io.freefair.lombok' version "${lombokIdVersion}"
    id 'jacoco'
    id 'nu.studer.jooq' version '8.1'
    id 'org.flywaydb.flyway' version "${flywayDbVersion}"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

sourceSets.main.java.srcDirs += 'build/generated/java/main'

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

configurations {
    flywayMigration
    testCompile.extendsFrom(compileOnly)
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

ext {
    set("lombokIdVersion", '6.6.1')
    set("flywayDbVersion", '9.14.1')
}

repositories {
    mavenCentral()
}

sourceSets.main.java.srcDir new File(buildDir, 'generated/sources/jooq/java')
idea {
    module {
        // Marks the already(!) added srcDir as "generated"
        generatedSourceDirs += file('build/generated/sources/jooq/java')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.2.1'
    //
    // DB
    implementation 'org.postgresql:postgresql:42.2.14'
//    implementation 'org.flywaydb:flyway-core:9.14.1'
    implementation "org.flywaydb:flyway-core:${flywayDbVersion}"
    //
    // JOOQ
    flywayMigration 'com.h2database:db:2.0.206'
    jooqGenerator 'org.postgresql:postgresql:42.2.14'
    //
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.jooq:jooq:3.17.7'
    implementation 'org.jooq:jooq-codegen:3.17.7'

    implementation('com.puppycrawl.tools:checkstyle') { version { prefer '10.3.3' } }

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
}

//flywayMigrate.dependsOn classes

flyway {
    url = 'jdbc:postgresql://localhost:55433/dev_covid19'
    user = 'sekretka'
    password = 'sekretka'
    locations = ['classpath:db/migration']
    schemas = ['public']
}

task buildZip(type: Zip) {
    archiveExtension.set("jar")
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}
build.dependsOn buildZip

// Executable Options
tasks.named("bootJar") {
    mainClass = 'api.covid19.stats.Covid19ApiStatsApplication'
}
tasks.named("bootRun") {
    mainClass = 'api.covid19.stats.Covid19ApiStatsApplication'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Now we can run the jOOQ task when compiling Java code, or manually by this command: ./gradlew :jooq:generateJooq.


jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = flyway.url
                    user = flyway.user
                    password = flyway.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        includes = '.*'
                        excludes = ''
                    }
                    target {
                        packageName = 'api.covid19.stats.jooq'
                        directory = 'build/generated/sources/jooq/java'
                    }
                }
            }
        }
    }
}

// configure jOOQ task such that it only executes when something has changed that potentially affects the generated
// JOOQ sources
// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
// - the classpath used to execute the jOOQ generation tool has changed (jOOQ library, database driver, strategy
// classes, etc.)
// - the schema files from which the schema is generated and which is used by jOOQ to generate the sources have
// changed (scripts added, modified, etc.)

tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds (and build caching)
    allInputsDeclared = true
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "api/covid19/stats/jooq/**"
            ])
        }))
    }
}



//checkstyle {
//    configFile = project(':').file("src/main/resources/checkstyle.xml")
//    checkstyleTest.enabled = false
//}

//checkstyleMain.dependsOn compileJava
